// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable */

import * as flatbuffers from 'flatbuffers';

export class TreeNodeFb {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): TreeNodeFb {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsTreeNodeFb(bb: flatbuffers.ByteBuffer, obj?: TreeNodeFb): TreeNodeFb {
    return (obj || new TreeNodeFb()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsTreeNodeFb(bb: flatbuffers.ByteBuffer, obj?: TreeNodeFb): TreeNodeFb {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new TreeNodeFb()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  name(): string | null;
  name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  name(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  isFolder(): boolean {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
  }

  children(index: number, obj?: TreeNodeFb): TreeNodeFb | null {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset
      ? (obj || new TreeNodeFb()).__init(
          this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),
          this.bb!,
        )
      : null;
  }

  childrenLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  static startTreeNodeFb(builder: flatbuffers.Builder) {
    builder.startObject(3);
  }

  static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, nameOffset, 0);
  }

  static addIsFolder(builder: flatbuffers.Builder, isFolder: boolean) {
    builder.addFieldInt8(1, +isFolder, +false);
  }

  static addChildren(builder: flatbuffers.Builder, childrenOffset: flatbuffers.Offset) {
    builder.addFieldOffset(2, childrenOffset, 0);
  }

  static createChildrenVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!);
    }
    return builder.endVector();
  }

  static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4);
  }

  static endTreeNodeFb(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static finishTreeNodeFbBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {
    builder.finish(offset);
  }

  static finishSizePrefixedTreeNodeFbBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {
    builder.finish(offset, undefined, true);
  }

  static createTreeNodeFb(
    builder: flatbuffers.Builder,
    nameOffset: flatbuffers.Offset,
    isFolder: boolean,
    childrenOffset: flatbuffers.Offset,
  ): flatbuffers.Offset {
    TreeNodeFb.startTreeNodeFb(builder);
    TreeNodeFb.addName(builder, nameOffset);
    TreeNodeFb.addIsFolder(builder, isFolder);
    TreeNodeFb.addChildren(builder, childrenOffset);
    return TreeNodeFb.endTreeNodeFb(builder);
  }
}
